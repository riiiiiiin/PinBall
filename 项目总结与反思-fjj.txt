我的主要负责的是地图类和地图元素类的编写。
· 我一开始写碰撞函数的时候没有通过写简单的测试程序来测试小球的速度变化公式是否正确，直接就构造了好多地图元素，后来在小组整合的时候出了bug,浪费了大家的时间。由此吸取了教训，每写一个函数或者一个小模块就要想办法测试一下确保它与自己的设想是一致的。
· 碰撞箱中的判断函数改过好几次，一开始是碰到就判定为碰撞，然后出现了球粘在地图元素上的情况，增大弹性系数也没有很好的效果，后来发现判定碰撞还需要加上一个条件：球与地图元素的相对速度是正的，即二者在相互靠近。加上这个条件之后碰撞就变得很干脆，小球不会出现黏在墙上的情况。
· 编写程序中遇到的一个难点是活板图像的旋转，网上能查到很多方法，但总是有这样或者那样的问题，最后把两种方法结合起来终于解决了这个问题。要解决一个问题，不能指望直接在网上找到标准答案，但网上的方法出现问题的时候，需要先理解程序的思路，想想问题出在哪里。
· 小球经过多次与弹力鼓、弹力线的碰撞，速度可能变得很大，产生穿模现象。因此我们加上了速度上限700，小球速度一旦超过700就将速度分量等比例缩小使得总速度等于700.
· 理论上讲，球与活板的碰撞应该综合考虑碰撞点的位置、活板的角速度、球的速度三者，再由物理定律推出碰撞后的速度，但这过于复杂。我们用三个直线墙简化了活板。如果活板在上升过程中与小球碰撞，则在y方向上的速度加一个常数，越靠外常数越大。从效果来看，模拟地还是可以的，但还有改进的空间。
